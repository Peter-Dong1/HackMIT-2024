{"ast":null,"code":"var _jsxFileName = \"/Users/traceylin/Documents/MIT/hackmit/2024/website/web/frontend/src/components/CamFeed.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useRef } from 'react';\nimport Webcam from 'react-webcam';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CamFeed({\n  onFetched\n}) {\n  _s();\n  const webcamRef = useRef(null);\n  useEffect(() => {\n    const timer = setInterval(() => {\n      const img = webcamRef.current.getScreenshot();\n      if (!img) return;\n\n      // Send a base64 image to the backend (port 5000)\n      fetch('http://localhost:5000/img-rec', {\n        method: 'POST',\n        body: img.split(',')[1]\n      }).then(res => res.json()).then(data => onFetched(data)).catch(error => console.error('Error:', error));\n    }, 1000); // cycle 1 second\n    return () => clearInterval(timer);\n  }, [webcamRef]);\n  return /*#__PURE__*/_jsxDEV(Webcam, {\n    ref: webcamRef,\n    screenshotFormat: \"image/jpeg\",\n    height: 600,\n    width: 600,\n    style: {\n      transform: 'scaleX(-1)' // This will flip the video horizontally\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n}\n_s(CamFeed, \"vuzfGVXxjtVv1onG8KfrkxLF4wc=\");\n_c = CamFeed;\nvar _c;\n$RefreshReg$(_c, \"CamFeed\");","map":{"version":3,"names":["useEffect","useRef","Webcam","jsxDEV","_jsxDEV","CamFeed","onFetched","_s","webcamRef","timer","setInterval","img","current","getScreenshot","fetch","method","body","split","then","res","json","data","catch","error","console","clearInterval","ref","screenshotFormat","height","width","style","transform","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/traceylin/Documents/MIT/hackmit/2024/website/web/frontend/src/components/CamFeed.js"],"sourcesContent":["import { useEffect, useRef } from 'react';\n\nimport Webcam from 'react-webcam';\n\nexport default function CamFeed({ onFetched }) {\n  const webcamRef = useRef(null);\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      const img = webcamRef.current.getScreenshot();\n      if (!img) return;\n\n      // Send a base64 image to the backend (port 5000)\n      fetch('http://localhost:5000/img-rec', {\n        method: 'POST',\n        body: img.split(',')[1]\n      })\n        .then((res) => res.json())\n        .then((data) => onFetched(data))\n        .catch((error) => console.error('Error:', error));\n    }, 1000); // cycle 1 second\n    return () => clearInterval(timer);\n  }, [webcamRef]);\n\n  return (\n    <Webcam\n      ref={webcamRef}\n      screenshotFormat=\"image/jpeg\"\n      height={600}\n      width={600}\n      style={{\n        transform: 'scaleX(-1)', // This will flip the video horizontally\n      }}\n    />\n  );\n}\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAEzC,OAAOC,MAAM,MAAM,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,eAAe,SAASC,OAAOA,CAAC;EAAEC;AAAU,CAAC,EAAE;EAAAC,EAAA;EAC7C,MAAMC,SAAS,GAAGP,MAAM,CAAC,IAAI,CAAC;EAE9BD,SAAS,CAAC,MAAM;IACd,MAAMS,KAAK,GAAGC,WAAW,CAAC,MAAM;MAC9B,MAAMC,GAAG,GAAGH,SAAS,CAACI,OAAO,CAACC,aAAa,CAAC,CAAC;MAC7C,IAAI,CAACF,GAAG,EAAE;;MAEV;MACAG,KAAK,CAAC,+BAA+B,EAAE;QACrCC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEL,GAAG,CAACM,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;MACxB,CAAC,CAAC,CACCC,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACzBF,IAAI,CAAEG,IAAI,IAAKf,SAAS,CAACe,IAAI,CAAC,CAAC,CAC/BC,KAAK,CAAEC,KAAK,IAAKC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC,CAAC;IACrD,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;IACV,OAAO,MAAME,aAAa,CAAChB,KAAK,CAAC;EACnC,CAAC,EAAE,CAACD,SAAS,CAAC,CAAC;EAEf,oBACEJ,OAAA,CAACF,MAAM;IACLwB,GAAG,EAAElB,SAAU;IACfmB,gBAAgB,EAAC,YAAY;IAC7BC,MAAM,EAAE,GAAI;IACZC,KAAK,EAAE,GAAI;IACXC,KAAK,EAAE;MACLC,SAAS,EAAE,YAAY,CAAE;IAC3B;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEN;AAAC5B,EAAA,CA/BuBF,OAAO;AAAA+B,EAAA,GAAP/B,OAAO;AAAA,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}